package masliuk.string;

/**
 * Утилиты для конвертации
 *
 * @author yura
 *
 */
public interface StringUtils {

    /**
     * Функция проверяет, что ip соответствует формату NNN.NNN.NNN.NNN<br>
     * Тоесть, что ip состоит из четырёх цифр разделённых точкой<br>
     * Каждое фракция должна быть в промежутке от 0 до 255<br>
     * В начале {@code ip} и конце возможно будут пробелы. <br>
     * IP фракции от 0 до 127 преобразуются в байт от 0 до 127
     * IP фракции от 128 до 255 преобразуются в байт от -128 до -1
     *
     * Пример: "127.0.0.255" -&gt; {127, 0, 0, -1}
     *
     * @param ip
     *            Ip адрес
     * @return {@code ip} в виде массива {@code byte} или, в случае ошибки,
     *         {@code null}.
     */
    byte[] ip2Bytes(String ip);

    /**
     * Функция конвертирует ip в NNN.NNN.NNN.NNN формат,
     * где каждая группа разделённая точкой будет состоять из трёх чисел<br>
     * Перед конвертацией необходимо удостовериться, что ip адрес, который передан в метод имеет правильный формат<br>
     * Тоесть, что ip состоит из четырёх цифр разделённых точкой<br>
     * Каждое число должно быть в промежутке от 0 до 255<br>
     * В начале {@code ip} и конце возможно будут пробелы. <br>
     * Пример конвертации: "127.0.0.1" -&gt; "127.000.000.001"
     *
     * @param ip
     *            Ip адрес
     * @return {@code ip} в виде строки формата NNN.NNN.NNN.NNN <br>
     *         {@code null} в случае, если переданный ip адрес имеет неверный формат
     */
    String convertIp(String ip);

    /**
     * Функция Создает строку всех символов английского алфавита "A..Z", где
     * четные буквы upper case, а нечетные в low case.
     *
     * @return StringBuilder с алфавитом.
     */
    StringBuilder alphabet();

    /**
     * Функция преобразует url в массив составляющих <br>
     * &lt;схема&gt;://[&lt;логин&gt;:&lt;пароль&gt;@&lt;хост&gt;:&lt;порт&gt;/&lt;путь&gt;?&lt;параметры&gt;#&lt;якорь&gt;<br>
     * Во входной строке значение любая состовлящая может отсутствовать, в этом случае соответсвующее значение в выходном 
     * массиве должно быть {@code null}
     *
     * @param uri
     *            строка содержащая идентификатор ресурса
     * @return массив строк, в которой:<br>
     *         [0] - схема<br>
     *         [1] - логин<br>
     *         [2] - пароль<br>
     *         [3] - хост<br>
     *         [4] - port<br>
     *         [5] - путь<br>
     *         [6] - параметры<br>
     *         [7] - якорь<br>
     * если нет какой-либо части, то в данном поле массива возвращаем {@code null}
     * Например, для url: "ftp://1.2.3.4:25/pass0/pass1/pass2?a=1&amp;b=2#anchor" -&gt;
     * возвращаемое значение: ["ftp", null, null, "1.2.3.4", "25", "pass0/pass1/pass2", "a=1&amp;b=2", "anchor"]
     */
    String[] uri2Array(String uri);

    /**
     * Функция преобразует словосочетание в CamelCase независимо от оригинального регистра букв<br>
     * Исключением служит первая буква. Её регистр нужно оставить нетронутым<br>
     * Разделителем слов служат пробелы и запятые<br>
     * Вначале и вконце строки возможны дополнительные пробелы<br>
     * Пример: "HeLlO jAvA, WoRlD" -&gt; "HelloJavaWorld"
     *
     * @param str
     *            обычная строка
     * @return строка в CamelCase<br>
     *         или пустая строка если передан null или пустая строка
     */
    String toCamelCase(String str);

    /**
     * Функция преобразует CamelCase строку в словосочетания в нижнем регистре<br>
     * Исключением служит первая буква. Её регистр нужно оставить нетронутым<br>
     * Пример: "HelloJavaWorld" -&gt; "Hello java world"
     *
     * @param camelStr
     *            CamelCase строка
     * @return обычная строка<br>
     *         или пустая строка если передан null или пустая строка
     */
    String fromCamelCase(String camelStr);
}
